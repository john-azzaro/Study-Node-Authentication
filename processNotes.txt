Process Notes for Node Authentication Study
===========================================
This is a pretty basic examination of authentication in node.  Although Passport can also be used for authentication (see this study 
in my list of repositories), this authentication will use just vanilla JavaScript and bcrypt for cryptography.

Setting up the project
=======================
1. install npm with "npm init"
2. install packages for express server.
    npm install express bcrypt
3. install nodemon
    npm install --save-dev nodemon
4. create script to run nodemon
    "devStart": "nodemon server.js",

Creating a basic server
=======================
6. Create a server.js file.
7. In server.js, load express and express app.
---------------------------------------------
    const express = require('express');
    const app = express();
---------------------------------------------
8. Listen on port 3000
--------------------------------------------------------------
    app.listen(3000, function() { 
        console.log('You app is listening on port 3000...');
    });
--------------------------------------------------------------
In gitbash, run npm run devStart to have nodemon constantly refresh.


Create GET route for users
===========================
9. First, create a basic GET route:
   Note: you normally wouldnt want a route that would request users but for this study you can do this.
-------------------------------------------
    app.get('/users', function(req, res) {
        res.json(users);                      <== this says that the response should be the users in json format.
    });
-------------------------------------------


Create local variable to store users for study
==============================================
10. Normally, you would want to have your users in a secure database, not as a variable on your server with an endpoint pointing directly to it.  
    However, for the purpose of this study, we will use a local variable.
----------------------------------------
    const users = [{ name: "John Smith"}]; 
----------------------------------------


Test GET route
==============
11. Either in Postman or Rest Client (which we use for this study), send a test request.
    To do this, you first need ot create a "resquest.rest" file.
    Inside that file, you write your GET request:
-----------------------------------------
    GET http://localhost:3000/users                <== this says that a GET request will be sent to the url entered to the users endpoint.
-----------------------------------------
   The response you get back an array of users (since we created a local variable "users" for test purposes), which should just be "Joe Smith".


Create a POST route
===================
    For authentication, you need to have a way to add users to authenticate.
    Within the post route, we need to:
       1. Create a users
       2. Hashing the password sent from a users
       3. Saving the password inside the "users" variable.

12. First, create POST route in your server.js file:
------------------------------------------------------
What this effectively does is push the new user into "users" with the variable comprised the name and password in the body of the response
and then returns a status of 201 (successful) and a blank response.


app.post('/users', function(req, res) {                                 // when the client posts by submitting a user name a passord...
    const user = { name: req.body.name, password: req.body.password}    // the variable user comprised of the name and the password...
    users.push(user);                                                   // push the user into the users variable...
    res.status(201).send();                                             // and return a 201 status code and a blank response to the user.
});
------------------------------------------------------


13.  When you test the POST request, you should get a confirmation (i.e. HTTP/1.1 201 Created).  But before you do that, you  need to create a 
     test user to post to our users variable, so we create a POST request to the users endpoint with a a content type of JSON and then a JSON object with a user and a password.

----------------------------------------------------------
POST http://localhost:3000/users
Content-Type: application/json

{
    "name": "Alan Turing",
    "password": "password"
}
----------------------------------------------------------
    Additionally, if you send another GET request after you submit the POST request, you will see the new user at the users endpoint.








Adding security to your users and passwords with hashing.
========================================================
If someone gets access to our database, they could easily read all the names and passwords.  So the best way to secure the names and passwords is with
bcrypt.


1. require in bcrypt (and load the dependcy if you have not already).
--------------------------------------
const bcrypt = require('bcrypt');
--------------------------------------

To hash a password, you need to do two things: create a "salt" and then use that salt to create a hash password.
To begin with, when you has a password, (i.e. hash('password')), it will return a "hashed" password with a jumble of letters (i.e. jhbvighveihvsdgjighjsdf).
However, if the password is just hashed, there can be repeatable patterns that hackers can detect and most likely crack (for example, if two users have the same password they could guess it).
To avoid this, you add a "salt" to the hash. (i.e. hash(salt + 'password')) which is different for every user.   The way bcrypt works is that when you save the password (step 6 below), it will
save the salt with the password with "hashedPassword".  But nayway, the main thing is your database is more secure if someone gets access to it.


2. To add bcrypt to your post request, you first need to turn the post request to an async/await function since bcrypt is an asynchronous library.
-------------------------------------------------------------------------------------------------------

app.post('/users', async function(req, res) {                                 <== add async modifier
    const user = { name: req.body.name, password: req.body.password}
    users.push(user);
    res.status(201).send();
});

-------------------------------------------------------------------------------------------------------


3. Then, you add a try/catch block
-------------------------------------------------------------------------------------------------------

app.post('/users', async function(req, res) {
    try {                                                                          <== try/catch block

    } catch(error) {                                                               <== if an error occurs, send a response with a status of 500.
        res.status(500).send();
    }
    const user = { name: req.body.name, password: req.body.password}
    users.push(user);
    res.status(201).send();
});

-------------------------------------------------------------------------------------------------------


4. Inside the try block, first ad your salt.
  * remember that this is an asynchronous function so remember to add the await modifier to your values.
-------------------------------------------------------------------------------------------------------

app.post('/users', async function(req, res) {
    try {
        const salt = await bcrypt.genSalt();                          <== to create a salt, you call bcrypt and use the method "genSalt" with any number you want( the larger the number,
        ...                                                               the longer it will take to generate the hash but the more secure it will be).  It is best just to leave this empty.
        ...                                                               If you use a 10, it could do a few hashes, but 20 or 30 will take DAYS to generate so just dont do it.  And mak sure
        ...                                                               make this an "await" since it is an asynchronous function.
        ...
    } catch(error) {
        res.status(500).send();
    }
    const user = { name: req.body.name, password: req.body.password}
    users.push(user);
    res.status(201).send();
});

-------------------------------------------------------------------------------------------------------


5. Next, add your hashed password AND replace the req.body.passowrd for user with "hashedPassword"
-------------------------------------------------------------------------------------------------------

app.post('/users', async function(req, res) {
    try {
        const salt = await bcrypt.genSalt(); 
        const hashedPassword = await bcrypt.hash(req.body.password, salt)            <== hashed passowrd
        ...
        ...
        ...
    } catch(error) {
        res.status(500).send();
    }
    const user = { name: req.body.name, password: hashedPassword}                    <== replace req.body.password with the variable "hashedPassword"
    users.push(user);
    res.status(201).send();
});

-------------------------------------------------------------------------------------------------------

6. Now you can move your remaining code inside the try block
-------------------------------------------------------------------------------------------------------

app.post('/users', async function(req, res) {
    try {
        const salt = await bcrypt.genSalt(); 
        const hashedPassword = await bcrypt.hash(req.body.password, salt)
        const user = { name: req.body.name, password: hashedPassword}           --|
        users.push(user);                                                         |-- moved inside try block.
        res.status(201).send();                                                 --|
    } catch(error) {
        res.status(500).send();
    }
});

-------------------------------------------------------------------------------------------------------


7. To test whether the encryption method above works, console.log both the salt and the hashed password.
-------------------------------------------------------------------------------------------------------

app.post('/users', async function(req, res) {
    try {
        const salt = await bcrypt.genSalt(); 
        const hashedPassword = await bcrypt.hash(req.body.password, salt);
        console.log(salt);                                                          <== log the salt
        console.log(hashedPassword);                                                <== log the password
        const user = { name: req.body.name, password: hashedPassword}
        users.push(user);     
        res.status(201).send();
    } catch(error) {
        res.status(500).send();
    }
});

-------------------------------------------------------------------------------------------------------

When you send the request(response shoudl be HTTP/1.1 201 Created), you will see the salt and hashed password:
-------------------------------------------------------------------

You app is listening on port 3000... 
$2b$10$/tJcQTlBJAOoFnDKad3M6O                                         <== salt
$2b$10$/tJcQTlBJAOoFnDKad3M6OQKkcOvoQPLo/iYEJLk.gaEvwhFXe39C          <== salt + hashed password

-------------------------------------------------------------------

So once you do this, you have a user and password.  That password can be used by any other user in your database because the salt
will make it different.  You can test this out by sending a post request for the exact same user and when you send a GET request, 
you will see two different passwords (same as the example above!).  For example

    First GET request (which will show the example user we have by default):
    ------------------------------------------------------
    [
    {
        "name": "John Smith"
    }
    ]
    ------------------------------------------------------

    Second, Send the POST request with a new user (i.e. Alan Turing). IN gitbash you'll see the salt and salt+hashed password.
    When you send a GET request, you will see the name and the password which is hashed and salted.
    ------------------------------------------------------
    You app is listening on port 3000...
    $2b$10$v.djtI71AcqSPn75sZHTOO
    $2b$10$v.djtI71AcqSPn75sZHTOOyyviecbsQG9ZxcVcIwc9xsfxYvJGhle
    ------------------------------------------------------

    Third, to test how salt and hashed password can allow same passwords, send the POST request again.
    ------------------------------------------------------
    $2b$10$6eh37ej7g5Ki9Bx3fsw8k.
    $2b$10$6eh37ej7g5Ki9Bx3fsw8k.GFyjgXGi5qiBpqGbzE2ccosp81BOGmq
    ------------------------------------------------------

    Fourth, send a GET request to see your users and compare the names and passwords.
    ------------------------------------------------------
    [
    {
        "name": "John Smith"
    },
    {
        "name": "Alan Turing",
        "password": "$2b$10$v.djtI71AcqSPn75sZHTOOyyviecbsQG9ZxcVcIwc9xsfxYvJGhle"
    },
    {
        "name": "Alan Turing",
        "password": "$2b$10$6eh37ej7g5Ki9Bx3fsw8k.GFyjgXGi5qiBpqGbzE2ccosp81BOGmq"
    }
    ]
    ------------------------------------------------------


8. For logins, setup another POST request.

--------------------------------------------------------------------
app.post('/users/login', async function(req, res) {                            // To do login, set route to users/login and use an async function (since bcrypt is an async library)
    const user = users.find(user => user.name === req.body.name)               // find the user...
    if (user === null) {                                                       // if the user does NOT exist...
        return res.status(400).send('Cannot find user...');                    //  return an error status code and error message.
    }
    try {                                                                      // next setup a try/catch block where we will do the comparison for the user.
        await bcrypt.compare(req.body.password, user.password)                 // use the compare method for bcrypt and pass in the intial password, then the hashed password from "user"
    } catch (error) {                                                          // and if there is an error, send 500 status code.
        res.status(500).send();
    }

});
--------------------------------------------------------------------
First, we want to find the user using the find method and search users for a name that matches the body name provided.
Second, then, check to see if the user name exists...
THird, inside a try block, use the "bcrypt.compare" method.  Then, you first pass the ititial password and THEN the hashed password (inside users which we found earlier).
    What this does is compares the two passwords, gets the salt out of the hashed password, hash the password provided and check to see if they are the same.

When you go to test it by sending a POST of a user, then try a login POST request, you will get a "Login Successful" message.  However, if you try to send another 
POST login with the password misspelled, you will get a "login failed" message.