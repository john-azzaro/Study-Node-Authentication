Process Notes for Node Authentication Study
===========================================
This is a pretty basic examination of authentication in node.  Although Passport can also be used for authentication (see this study 
in my list of repositories), this authentication will use just vanilla JavaScript and bcrypt for cryptography.

Setting up the project
=======================
1. install npm with "npm init"
2. install packages for express server.
    npm install express bcrypt
3. install nodemon
    npm install --save-dev nodemon
4. create script to run nodemon
    "devStart": "nodemon server.js",

Creating a basic server
=======================
6. Create a server.js file.
7. In server.js, load express and express app.
---------------------------------------------
    const express = require('express');
    const app = express();
---------------------------------------------
8. Listen on port 3000
--------------------------------------------------------------
    app.listen(3000, function() { 
        console.log('You app is listening on port 3000...');
    });
--------------------------------------------------------------
In gitbash, run npm run devStart to have nodemon constantly refresh.


Create GET route for users
===========================
9. First, create a basic GET route:
   Note: you normally wouldnt want a route that would request users but for this study you can do this.
-------------------------------------------
    app.get('/users', function(req, res) {
        res.json(users);                      <== this says that the response should be the users in json format.
    });
-------------------------------------------


Create local variable to store users for study
==============================================
10. Normally, you would want to have your users in a secure database, not as a variable on your server with an endpoint pointing directly to it.  
    However, for the purpose of this study, we will use a local variable.
----------------------------------------
    const users = [{ name: "John Smith"}]; 
----------------------------------------


Test GET route
==============
11. Either in Postman or Rest Client (which we use for this study), send a test request.
    To do this, you first need ot create a "resquest.rest" file.
    Inside that file, you write your GET request:
-----------------------------------------
    GET http://localhost:3000/users                <== this says that a GET request will be sent to the url entered to the users endpoint.
-----------------------------------------
   The response you get back an array of users (since we created a local variable "users" for test purposes), which should just be "Joe Smith".


Create a POST route
===================
    For authentication, you need to have a way to add users to authenticate.
    Within the post route, we need to:
       1. Create a users
       2. Hashing the password sent from a users
       3. Saving the password inside the "users" variable.

12. First, create a basic POST route in your server.js file:
------------------------------------------------------
    app.post('/users', function(req, res) {

    });
------------------------------------------------------

13.  Second, we need to create a test user to post to our users variable, so we create a POST request to the users endpoint
     with a a content type of JSON and then a JSON object with a user and a password.

----------------------------------------------------------
POST http://localhost:3000/users
Content-Type: application/json

{
    "name": "Alan Turing",
    "password": "password"
}
----------------------------------------------------------